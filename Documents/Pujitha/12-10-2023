Report on 12/10/2023
By:-Kondapally Pujitha 

Solidity basics

Visibility:-
Public:-can be used internally and externally
Private:-can be used within the contract only
internal:-can be used by contracts and other inherited contracts
external:-can be used by external contracts and accounts to save gas fee



Practice code:-

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract twitter{
    mapping(address => string) public tweets;
    
    function create(string memory _tweet) public{
        tweets[msg.sender]=_tweet;
    }

    function get(address _owner) public view returns (string memory){
        return tweets[_owner];
    }

}



Arrays:-

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract twitter{
    mapping(address => string[]) public tweets;
    
    function create(string memory _tweet) public{
        tweets[msg.sender].push(_tweet);
    }

    function get(address _owner,uint i) public view returns (string memory){
        return tweets[_owner][i];
    }

}



Require:-

The require keyword is used in Solidity to ensure that certain conditions are met before proceeding with the execution of a function. If the condition specified in the require statement is true, the function will continue to execute.

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract tweet_length{
    mapping (address => string) public tweets;
    function get_tweet(string memory _tweet) public{
        require(bytes(_tweet).length<=280,"Length of the tweet should be less than 280 characters");
        tweets[msg.sender]=_tweet;
    }
}

SOURCE:-https://www.youtube.com/watch?v=AYpftDFiIgk
